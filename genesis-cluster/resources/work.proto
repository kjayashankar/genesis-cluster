
option optimize_for = SPEED;
option java_package = "pipe.work";

import "common.proto";
import "election.proto";
import "pipe.proto";


message WorkState {
   required int32 term = 3;
   required int32 enqueued = 1;
   required int32 processed = 2;
}

message Heartbeat {
   required WorkState state = 1;
   //optional NodeNetwork = 2;
}

message DragonBeat {
	repeated NodeLinks nodelinks = 1;
	optional int32 checksum = 2;
	required string mode = 3;
}

message NodeLinks {
	repeated Node inbound = 1;
	required Node me = 2;
	repeated Node outbound = 3;
}
/**
 * description of the work
 */

enum TaskType {
	SIMPLETASK = 1;
	LAZYTASK = 2;
}
message Task {  
	repeated Node processed = 6;
	optional TaskType type = 5;
    required int64 series_id = 1;
    required int32 seq_id = 2;
    optional string token = 4;
    optional CommandMessage commandMessage = 3;
}

message Vote{
	required Verdict verdict = 1;
	enum Verdict{
		VOTE = 1;
		REJECT = 2;
	}
}

message Register {
	required string mode = 1;
	optional Node destNode = 2;
	optional Node leader = 3;
}

message Moderator {
	required string id = 1;
	required Node origin = 2;
}

// These are messages to keep the network running (not to perform work)
message WorkMessage {
   required Header header = 1;
   required int64 secret = 2;

   /**
    * The actions (request or response) is
    * implicit through which data structure is in the payload.
    */ 

   oneof payload {
      Failure err = 3;
      
      // a sanity check for testing
      bool ping = 4;

      // status updates between adjacent workers
      Heartbeat beat = 5;
	  DragonBeat dragon = 9;	
      Task task = 6;
      WorkState state = 7;
      LeaderStatus leader = 8;
      Register register = 10;
      Vote verdict = 11;
      bool steal = 12;
      bool stealResponse = 13;
      Moderator moderator = 20;
   }
   
}
